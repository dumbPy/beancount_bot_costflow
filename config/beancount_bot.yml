log:
  # Log level
  level: 'INFO'

bot:
  # Agent
  proxy: null

  # Telegram Robot Token
  # Telegram 机器人 Token
  token: ''

  # Authentication with tokens. Used to verify identity when entering the robot for the first time
  # 鉴权用令牌。第一次进入机器人时用于校验身份
  auth_token: '123456'

  # Robot session file path
  session_file: 'bot.session'

transaction:
  # Account book file. Available: {year}, {month}, {date}
  beancount_file: 'beans/journal.beancount'

  # Message Processor
  message_dispatcher:
    # class must contain the complete module name, third-party plug-ins can set PYTHONPATH to load
    # args Refer to the documentation of each processor
    # Currently built template processor can be configured as follows
    - class: 'beancount_bot.builtin.template_dispatcher.TemplateDispatcher'
      args:
        template_config: '/config/template.yml'
    # Costflow
    - class: 'beancount_bot_costflow.CostflowDispatcher'
      args:
        costflow_config: '/config/costflow.json'

schedule:
  # Regular tasks defined
  # name: Timing task name, you can use /task name to trigger actively
  # class: Timing task class
  # args: Parameters needed to create a task

  # Timing Example: regularly updated Price
  # Use the built-in task class: beancount_bot.builtin.DailyCommandTask
  # Class in daily instruction execution time, the broadcast message after message
  - name: price
    class: 'beancount_bot.builtin.DailyCommandTask'
    args:
      time: '21:30'
      message : ' The price update of the day is complete '
      commands:
        - 'bean-price /bean/main.bean >> /bean/automatic/prices.bean'
